<?php
namespace UserClasses\BusinessLayer;

use UserClasses\BusinessObjects\TermsConditionsBO;
use UserClasses\DataLayer\TermsConditionDL;
use UserClasses\DataLayer\SystemLicenseDL;

/**
 *
 * @author Bheki Mthethwa
 *        
 */
class TermsAndConditions
{
    private $sender;

    /**
     */
    public function __construct()
    {
        $this->sender=new Email();    
    }
    
    public function __destruct(){
        $this->sender=null;
    }
    
    public function listTermsData(TermsConditionsBO $data=null):array {
        if(isset($data)) {
            $termsDL=new TermsConditionDL();
            $err_handler=new ErrorLog();
            $arr=$data->getArray(); //convert Object Into array
            try{
                $results_arr=$termsDL->searchData($arr);
            }
            catch (\Exception $e){
                $class_name="TermsAndConditions";
                $method_name="listTermsData";
                //Log Exception here in errors.txt file
                $err_handler->logErrors($e,NULL,$class_name, $method_name);
            }
            finally{
                //destroy object
                unset($termsDL);
                unset($err_handler);
            }
            return $results_arr;
        }
        else return NULL;
    }
    
    public function checkTermsExist(TermsConditionsBO $data=null):bool {
        if(isset($data)) {
            $termsDL=new TermsConditionDL();
            $err_handler=new ErrorLog();
            $arr=$data->getArray(); //convert Object Into array
            //print_r($arr);
            try{
                $status_message=$termsDL->dataExists($arr);  //submit data for checking duplicate
            }
            catch (\Exception $e){
                $class_name="TermsAndConditions";
                $method_name="checkTermsExist";
                //Log Exception here in errors.txt file
                $err_handler->logErrors($e,NULL,$class_name, $method_name);
            }
            finally{
                //destroy object
                unset($termsDL);
                unset($err_handler);
            }
            return $status_message;
        }
        else return false;
    }
    
    public function addTerms(TermsConditionsBO $data=null):bool {
        if(isset($data)) {
            $termsDL=new TermsConditionDL();
            $licenseDL=new SystemLicenseDL();
            $data->setLicenseID($licenseDL->getPrimaryKey($data->getArray()));
            $err_handler=new ErrorLog();
            $arr=$data->getArray(); //convert Object Into array
            try{
                $status_message=$termsDL->create($arr);  //submit data for creation
            }
            catch (\Exception $e){
                $class_name="TermsAndConditions";
                $method_name="addTerms";
                //Log Exception here in errors.txt file
                $err_handler->logErrors($e,NULL,$class_name, $method_name);
            }
            finally{
                //destroy object
                unset($termsDL);
                unset($licenseDL);
                unset($err_handler);
            }
            //print_r($arr);
            return $status_message;
        }
        else return false;
    }
    
    public function updateTerms(TermsConditionsBO $data=null):bool {
        if(isset($data)) {
            $termsDL=new TermsConditionDL();
            $err_handler=new ErrorLog();
            $arr=$data->getArray(); //convert Object Into array
            try{
                $status_message=$termsDL->update($arr);  //submit data for updating
                if($status_message){
                    $arr_email=$this->generateEmailMessage();
                    $this->sender->sendEmail($arr_email);
                }
            }
            catch (\Exception $e){
                $class_name="TermsAndConditions";
                $method_name="updateTerms";
                //Log Exception here in errors.txt file
                $err_handler->logErrors($e,NULL,$class_name, $method_name);
            }
            finally{
                //destroy object
                unset($termsDL);
                unset($err_handler);
            }
            //print_r($arr);
            return $status_message;
        }
        else return false;
    }
    
    private function generateEmailMessage():array {
        //generate email array
        $arr_email=array();
        $arr_email["to"]="bmthethwa@gqunsueng.co.za";
        $arr_email["subject"]="Terms and Conditions Details Alert";
        //extract company name
        $data=new TermsConditionsBO();
        $arr_results=$this->listTermsData($data);
        $body="Dear Super Administrator<p>";
        $body.="The contractual terms and conditions information, for ".$arr_results[0]["CompanyName"]." based in";
        $body.=" ".$arr_results[0]["Surburb"]." in ".$arr_results[0]["City"]." has been updated<p>";
        $body.=" By Order (Gqunsu Engineering Pty Ltd)";
        $arr_email["body"]=$body;
        return $arr_email;
    }    
 
}

