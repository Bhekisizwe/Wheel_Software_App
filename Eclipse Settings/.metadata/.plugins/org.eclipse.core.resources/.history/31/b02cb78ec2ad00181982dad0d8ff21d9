<?php
declare(strict_types=1);
namespace UserClasses\BusinessLayer;

use UserClasses\DataLayer\WheelReprofilingDL;
use UserClasses\BusinessObjects\ActivityLogBO;
use UserClasses\BusinessObjects\WheelReprofilingDataBO;

/**
 *
 * @author Bheki Mthethwa
 *        
 */
class WheelReprofilingData
{
    private $activityLog;
    private $activityBO;
    private $wheelReprofDL;
    private $err;

    /**
     */
    public function __construct()
    {
        $this->err=new ErrorLog();
        $this->activityLog=new ActivityLog();
        $this->activityBO=new ActivityLogBO();
        $this->wheelReprofDL=new WheelReprofilingDL();
    }

    /**
     */
    function __destruct()
    {
        $this->err=null;
        $this->activityBO=null;
        $this->activityLog=null;
        $this->wheelReprofDL=null;
    }
    
    public function searchForReprofilingData(WheelReprofilingDataBO $data):array {
        if(isset($data)){
            try {
                $arr=$data->getArray();
                $arr_result=$this->wheelReprofDL->searchData($arr);
            } catch (\Exception $e) {
                $class_name="WheelReprofilingData";
                $method_name="searchForReprofilingData";
                $this->err->logErrors($e,null,$class_name, $method_name);
            }
            return $arr_result;
        }
        else return NULL;
    }
    
    public function addReprofilingData(WheelReprofilingDataBO $data):bool {
        if(isset($data)){
            try {
                $arr=$data->getArray();
                if(!$this->checkAlarmEventExists($data)){
                    //it does not exist, add the event.
                    $status_message=$this->wheelReprofDL->create($arr);
                    if($status_message){
                        $arr_data=array();
                        $arr_data["taskArray2D"][0]["taskName"]="Alarm Event Logger";
                        $arr_data["transactionName"]="Adding Alarm Event to Database";
                        $arr_data["activityAction"]=1;      //create
                        $arr_data["staffNumber"]=$data->getStaffNumber();
                        $this->activityBO->set($arr_data);
                        $this->activityLog->addActivityData($this->activityBO);
                    }
                }
                else {
                    //update the alarm event.
                    $status_message=$this->updateAlarmEvent($data);
                }
                
            } catch (\Exception $e) {
                $class_name="WheelReprofilingData";
                $method_name="addReprofilingData";
                $this->err->logErrors($e,null,$class_name, $method_name);
            }
            return $status_message;
        }
        else return false;
    }
    
    public function updateReprofilingData(WheelReprofilingDataBO $data):bool {
        
    }
    
    public function checkReprofilingDataExists(WheelReprofilingDataBO $data):bool {
        if(isset($data)){
            try {
                $arr=$data->getArray();
                $status_message=$this->wheelReprofDL->dataExists($arr);
            } catch (\Exception $e) {
                $class_name="WheelReprofilingData";
                $method_name="checkReprofilingDataExists";
                $this->err->logErrors($e,null,$class_name, $method_name);
            }
            
            return $status_message;
        }
        else return false;
    }
    
    private function calculateCutLength(float $initialDiameter,float $finalDiameter):float {
        
    }
}

