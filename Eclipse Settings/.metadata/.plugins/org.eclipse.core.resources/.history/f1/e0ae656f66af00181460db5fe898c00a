<?php
declare(strict_types=1);
namespace UserClasses\BusinessLayer;

use UserClasses\BusinessObjects\WheelMeasurementsComparisonBO;
use UserClasses\BusinessObjects\ManualWheelMeasurementsBO;
use UserClasses\BusinessObjects\DailyDistanceSettingBO;
use UserClasses\BusinessObjects\WearRatesBO;
use UserClasses\BusinessObjects\ManualWheelSettingsBO;
use UserClasses\BusinessObjects\AutoWheelSettingsBO;
use UserClasses\DataLayer\AssetRegisterDL;

/**
 *
 * @author Bheki Mthethwa
 *        
 */
class WheelMeasurementsComparison
{
    private $err;
    private $manualWheelMeas;
    private $autoWheelSettings;
    private $manualWheelSettings;   
    private $manualMeasBO;
    private $wearRates;
    private $wearRatesBO;
    private $dailyDistance;
    private $dailyDistanceBO;

    /**
     */
    public function __construct()
    {
        $this->err=new ErrorLog();
        $this->manualWheelMeas=new ManualWheelMeasurements();
        $this->autoWheelSettings=new AutoWheelSettings();
        $this->manualWheelSettings=new ManualWheelSettings();
        $this->manualMeasBO=new ManualWheelMeasurementsBO();
        $this->wearRates=new WearRatesSetting();
        $this->dailyDistance=new DailyDistanceSetting();
        $this->dailyDistanceBO=new DailyDistanceSettingBO();
        $this->wearRatesBO=new WearRatesBO();
    }

    /**
     */
    function __destruct()
    {
        $this->err=null;
        $this->manualWheelMeas=null;
        $this->autoWheelSettings=null;
        $this->manualWheelSettings=null;
        $this->manualMeasBO=null;
        $this->wearRates=null;
        $this->dailyDistance=null;
        $this->dailyDistanceBO=null;
        $this->wearRatesBO=null;
    }
    
    public function checkManualSettingsExist(ManualWheelSettingsBO $data):bool {
        if(isset($data)){
            $arr=$this->manualWheelSettings->showGlobalWheelSettings($data);
            $status_message=false;
            foreach($arr["warning2DArray"] as $value){
                if(array_search("CTD",$value)=="paramName"){
                    $status_message=true;
                    break;
                }                
            }          
        }
        else return false;
    }
    
    public function checkAutoSettingsExist(AutoWheelSettingsBO $data):bool {
        if(isset($data)){
            $asset=new AssetRegisterDL();
            $coachID=$asset->getCoachIDFromCoachNumber($data);
            $arr["alarms2DArray"][0]["coachID"]=$coachID;
            $arr=$this->autoWheelSettings->showCoachWheelSettings($data);
            if(array_search($needle, $haystack)$arr["warning2DArray"][0]["paramName"]=="Sh"){
                return true;
            }
            else return false;
        }
        else return false;
    }
    
    public function checkWearRatesSettingsExist(WearRatesBO $data):bool {
        if(isset($data)){
            $arr=$this->wearRates->showWearRateSettings($data);
            if(count($arr["wearRate2DArray"])>0){
                return true;
            }
            else return false;
        }
        else return false;
    }
    
    public function checkDailyDistanceSettingExists(DailyDistanceSettingBO $data):bool {
        if(isset($data)){
            $arr=$this->dailyDistance->showDistanceSetting($data);
            if(count($arr)>0){
                return true;
            }
            else return false;
        }
        else return false;
    }    
    
    private function getWheelMeasurements(ManualWheelMeasurementsBO $data):array {
        if(isset($data)){
            $arr=$this->manualWheelMeas->getWheelReportData($data); 
            return $arr;
        }
        else return NULL;
    }
    
    private function compareWheelMeasurementsToSettings(array $data,AutoWheelSettingsBO $autosettings,ManualWheelSettingsBO $manualsettings):array {
        if(isset($data)){
            //compare MiniProf Measured Parameters with Alarm and Warning Thresholds
            //get the CoachID first in order to retreive the correct MiniProf settings
            try {
                $asset=new AssetRegisterDL();
                $coachID=$asset->getCoachIDFromCoachNumber($data);
                $arr["alarms2DArray"][0]["coachID"]=$coachID;
                $autosettings->set($arr);
            } catch (Exception $e) {
                $class_name="WheelMeasurementsComparison";
                $method_name="compareWheelMeasurementsToSettings";
                $this->err->logErrors($e,null,$class_name, $method_name);
            }
            finally{
                unset($asset);
            }  
            $data["addToExceptionList"]=false;  //Flag to see which wheel needs to be added to the List
            //get Auto Wheel settings
            $arr_auto_settings=$this->autoWheelSettings->showCoachWheelSettings($autosettings);
            for($i=0;$i<count($arr_auto_settings["warning2DArray"]);$i++){
                switch($arr_auto_settings["warning2DArray"][$i]["paramName"]){
                    case "Sh":  //flange height comparison                       
                        if($data["flangeHeight"]>=$arr_auto_settings["alarms2DArray"][$i]["alarmLevel"]){
                            $data["flangeHeightStatus"]=2;  
                            $data["addToExceptionList"]=true;
                        }
                        if($data["flangeHeight"]>=$arr_auto_settings["warning2DArray"][$i]["warningLevel"]){
                            $data["flangeHeightStatus"]=3; 
                            $data["addToExceptionList"]=true;
                        }
                        break;
                    case "qR":  //Toe Creep comparison
                        if($data["toeCreep"]<=$arr_auto_settings["alarms2DArray"][$i]["alarmLevel"]){
                            $data["toeCreepStatus"]=2;
                            $data["addToExceptionList"]=true;
                        }
                        if($data["toeCreep"]<=$arr_auto_settings["warning2DArray"][$i]["warningLevel"]){
                            $data["toeCreepStatus"]=3;
                            $data["addToExceptionList"]=true;
                        }
                        break;
                    case "FW":  //Flange Width Comparison
                        if($data["flangeWidth"]<=$arr_auto_settings["alarms2DArray"][$i]["alarmLevel"]){
                            $data["flangeWidthStatus"]=2;
                            $data["addToExceptionList"]=true;
                        }
                        if($data["flangeWidth"]<=$arr_auto_settings["warning2DArray"][$i]["warningLevel"]){
                            $data["flangeWidthStatus"]=3;
                            $data["addToExceptionList"]=true;
                        }
                        break;
                    case "H":   //Hollowing Comparison
                        if(abs($data["hollowing"])>=abs($arr_auto_settings["alarms2DArray"][$i]["alarmLevel"])){
                            $data["hollowingStatus"]=2;
                            $data["addToExceptionList"]=true;
                        }
                        if(abs($data["hollowing"])>=abs($arr_auto_settings["warning2DArray"][$i]["warningLevel"])){
                            $data["hollowingStatus"]=3;
                            $data["addToExceptionList"]=true;
                        }
                }
            }
            //compare the Manually measured wheel measurements to the thresholds
            //get the manual settings first!
            $arr_manual_settings=$this->manualWheelSettings->showGlobalWheelSettings($manualsettings);
            for($i=0;$i<count($arr_manual_settings["warning2DArray"]);$i++){
                switch($arr_manual_settings["warning2DArray"][$i]["paramName"]){
                    case "CTD":  //Cut Tyre Depth comparison                       
                        if($data["cutTyreDepth"]>=$arr_manual_settings["warning2DArray"][$i]["warningLevel"]){
                            $data["cutTyreDepthStatus"]=2;
                            $data["addToExceptionList"]=true;
                        }
                        break;
                    case "CTW":  //Cut Tyre Width comparison                      
                        if($data["cutTyreWidth"]>=$arr_manual_settings["warning2DArray"][$i]["warningLevel"]){
                            $data["cutTyreWidthStatus"]=2;
                            $data["addToExceptionList"]=true;
                        }
                        break;
                    case "CTDFF":  //Cut Tyre Distance From Flange Comparison                      
                        if($data["cutTyreDistanceFromFlange"]>=$arr_manual_settings["warning2DArray"][$i]["warningLevel"]){
                            $data["cutTyreDistanceFromFlangeStatus"]=2;
                            $data["addToExceptionList"]=true;
                        }
                        break;
                    case "SR":   //Spread Rim Comparison                        
                        if($data["spreadRim"]>=$arr_manual_settings["warning2DArray"][$i]["warningLevel"]){
                            $data["spreadRimStatus"]=2;
                            $data["addToExceptionList"]=true;
                        }
                        break;
                    case "WS":   //Wheel Skid Comparison                       
                        if($data["wheelSkid"]>=$arr_manual_settings["warning2DArray"][$i]["warningLevel"]){
                            $data["wheelSkidStatus"]=2;
                            $data["addToExceptionList"]=true;
                        }
                }
            }
            if($data["addToExceptionList"]==true){
                //calculate failure dates for only those that have violated the alarm and warning settings
                $arr_result=$this->predictFailureDate($data, $arr_auto_settings);
            }
            else $arr_result=$data;
            return $arr_result;
        }
        else return NULL;
    }
    
    private function predictFailureDate(array $data,array $autosettings):array {
        if(isset($data)){
            $arr_predicted_dates=array();  
            //get the distance travelled daily
            $distance_arr=$this->dailyDistance->showDistanceSetting($this->dailyDistanceBO);  
            //get the Wear Rate per kilometer
            $wearrate_arr=$this->wearRates->showWearRateSettings($this->wearRatesBO);
            foreach($data as $key => $value){
                switch($key){
                    case "flangeHeightStatus":
                        if($value==3){
                            //warning level violated therefore the failure date is today's date.                            
                            $arr_predicted_dates["Flange Height"]=$data["measurementDate"];  
                            $arr["Flange Height"]["defectSize"]=$data["flangeHeight"];
                        }
                        elseif($value==2){
                            //calculate failure date using formula. Only alarm level has been violated
                            for($i=0;$i<count($autosettings);$i++){
                                if($autosettings["warning2DArray"][$i]["paramName"]=="Sh"){
                                    $warningLevel=$autosettings["warning2DArray"][$i]["warningLevel"];
                                }
                            }                            
                            for($j=0;$j<count($wearrate_arr["wearRate2DArray"]);$j++){
                                if($wearrate_arr["wearRate2DArray"][$j]["paramName"]=="Sh"){
                                    $wearRate=$wearrate_arr["wearRate2DArray"][$j]["wearRate"];
                                }
                            }
                            $daystofailure=abs($data["flangeHeight"]-$warningLevel)/($distance_arr["distance"]*$wearRate);
                            $numberOfDaysLeft=floor($daystofailure);
                            $dateObj=new \DateTime($data["measurementDate"]);
                            $dateObj->add(new \DateInterval("P".$numberOfDaysLeft."D"));
                            $arr_predicted_dates["Flange Height"]=$dateObj->format("Y-m-d");
                            $arr["Flange Height"]["defectSize"]=$data["flangeHeight"];
                            unset($dateObj);
                        }
                        else{
                            //do nothing
                        }                        
                        break;
                    case "flangeWidthStatus":
                        if($value==3){
                            //warning level violated therefore the failure date is the Date of Measurement
                            $arr_predicted_dates["Flange Width"]=$data["measurementDate"];
                            $arr["Flange Width"]["defectSize"]=$data["flangeWidth"];
                        }
                        elseif($value==2){
                            //calculate failure date using formula. Only alarm level has been violated
                            for($i=0;$i<count($autosettings);$i++){
                                if($autosettings["warning2DArray"][$i]["paramName"]=="FW"){
                                    $warningLevel=$autosettings["warning2DArray"][$i]["warningLevel"];
                                }
                            }                           
                            
                            for($j=0;$j<count($wearrate_arr["wearRate2DArray"]);$j++){
                                if($wearrate_arr["wearRate2DArray"][$j]["paramName"]=="FW"){
                                    $wearRate=$wearrate_arr["wearRate2DArray"][$j]["wearRate"];
                                }
                            }
                            $daystofailure=abs($data["flangeWidth"]-$warningLevel)/($distance_arr["distance"]*$wearRate);
                            $numberOfDaysLeft=floor($daystofailure);
                            $dateObj=new \DateTime($data["measurementDate"]);
                            $dateObj->add(new \DateInterval("P".$numberOfDaysLeft."D"));
                            $arr_predicted_dates["Flange Width"]=$dateObj->format("Y-m-d");
                            $arr["Flange Width"]["defectSize"]=$data["flangeWidth"];
                            unset($dateObj);
                        }
                        else{
                            //do nothing
                        }                        
                        break;
                    case "toeCreepStatus":
                        if($value==3){
                            //warning level violated therefore the failure date is the Date of Measurement
                            $arr_predicted_dates["Toe Creep"]=$data["measurementDate"];
                            $arr["Toe Creep"]["defectSize"]=$data["toeCreep"];
                        }
                        elseif($value==2){
                            //calculate failure date using formula. Only alarm level has been violated
                            for($i=0;$i<count($autosettings);$i++){
                                if($autosettings["warning2DArray"][$i]["paramName"]=="qR"){
                                    $warningLevel=$autosettings["warning2DArray"][$i]["warningLevel"];
                                }
                            }
                            
                            for($j=0;$j<count($wearrate_arr["wearRate2DArray"]);$j++){
                                if($wearrate_arr["wearRate2DArray"][$j]["paramName"]=="qR"){
                                    $wearRate=$wearrate_arr["wearRate2DArray"][$j]["wearRate"];
                                }
                            }
                            $daystofailure=abs($data["toeCreep"]-$warningLevel)/($distance_arr["distance"]*$wearRate);
                            $numberOfDaysLeft=floor($daystofailure);
                            $dateObj=new \DateTime($data["measurementDate"]);
                            $dateObj->add(new \DateInterval("P".$numberOfDaysLeft."D"));
                            $arr_predicted_dates["Toe Creep"]=$dateObj->format("Y-m-d");
                            $arr["Toe Creep"]["defectSize"]=$data["toeCreep"];
                            unset($dateObj);
                        }
                        else{
                            //do nothing
                        } 
                        break;
                    case "hollowingStatus":
                        if($value==3){
                            //warning level violated therefore the failure date is the Date of Measurement
                            $arr_predicted_dates["Hollowing"]=$data["measurementDate"];
                            $arr["Hollowing"]["defectSize"]=$data["hollowing"];
                        }
                        elseif($value==2){
                            //calculate failure date using formula. Only alarm level has been violated
                            for($i=0;$i<count($autosettings);$i++){
                                if($autosettings["warning2DArray"][$i]["paramName"]=="H"){
                                    $warningLevel=$autosettings["warning2DArray"][$i]["warningLevel"];
                                }
                            }
                            
                            for($j=0;$j<count($wearrate_arr["wearRate2DArray"]);$j++){
                                if($wearrate_arr["wearRate2DArray"][$j]["paramName"]=="H"){
                                    $wearRate=$wearrate_arr["wearRate2DArray"][$j]["wearRate"];
                                }
                            }
                            $daystofailure=abs($data["hollowing"]-$warningLevel)/($distance_arr["distance"]*$wearRate);
                            $numberOfDaysLeft=floor($daystofailure);
                            $dateObj=new \DateTime($data["measurementDate"]);
                            $dateObj->add(new \DateInterval("P".$numberOfDaysLeft."D"));
                            $arr_predicted_dates["Hollowing"]=$dateObj->format("Y-m-d");
                            $arr["Hollowing"]["defectSize"]=$data["hollowing"];
                            unset($dateObj);
                        }
                        else{
                            //do nothing
                        } 
                        break;
                    case "spreadRimStatus":        
                        if($value==2){
                            //warning level violated therefore the failure date is the Date of Measurement
                            $arr_predicted_dates["Spread Rim"]=$data["measurementDate"];
                            $arr["Spread Rim"]["defectSize"]=$data["spreadRim"];
                        }
                        else{
                            //do nothing
                        }
                        break;
                    case "wheelSkidStatus":                        
                        if($value==2){
                            //warning level violated therefore the failure date is the Date of Measurement
                            $arr_predicted_dates["Wheel Skid"]=$data["measurementDate"];
                            $arr["Wheel Skid"]["defectSize"]=$data["wheelSkid"];
                        }
                        else{
                            //do nothing
                        }
                        break;
                    case "cutTyreDepthStatus":                        
                        if($value==2){
                            //warning level violated therefore the failure date is the Date of Measurement
                            $arr_predicted_dates["Cut Tyre Depth"]=$data["measurementDate"];
                            $arr["Cut Tyre Depth"]["defectSize"]=$data["cutTyreDepth"];
                        }
                        else{
                            //do nothing
                        }
                        break;
                    case "cutTyreWidthStatus":                        
                        if($value==2){
                            //warning level violated therefore the failure date is the Date of Measurement
                            $arr_predicted_dates["Cut Tyre Width"]=$data["measurementDate"];
                            $arr["Cut Tyre Width"]["defectSize"]=$data["cutTyreWidth"];
                        }
                        else{
                            //do nothing
                        } 
                        break;
                    case "cutTyreDistanceFromFlangeStatus":
                        if($value==2){
                            //warning level violated therefore the failure date is the Date of Measurement
                            $arr_predicted_dates["Cut Tyre Distance From Flange"]=$data["measurementDate"];
                            $arr["Cut Tyre Distance From Flange"]["defectSize"]=$data["cutTyreDistanceFromFlange"];
                        }
                        else{
                            //do nothing
                        } 
                        
                }
            }
            //determine closest date to the measurement date.
            $data["predictedWheelFailureDate"]=min($arr_predicted_dates); 
            $data["alarmCause"]="The ".array_search($data["predictedWheelFailureDate"], $arr_predicted_dates)." has violated the wheel settings thresholds";
            $data["referenceDate"]=$data["measurementDate"];
            $data["defectSize"]=$arr[array_search($data["predictedWheelFailureDate"], $arr_predicted_dates)]["defectSize"];
            return $data;
        }
        else return NULL;
    }
    
    public function getMeasurementsExceptionList(ManualWheelMeasurementsBO $data):array {
        if(isset($data)) {
            $exceptionList=array();
            $manualsettings=new ManualWheelSettingsBO();
            $autosettings=new AutoWheelSettingsBO();
            $arr=$this->getWheelMeasurements($data); //get wheel measurements between the specified start and end dates
            //compare settings to wheel measurements. Calculate the predicted failure date too
            foreach($arr as $value){
                //loop through all wheel measurements
                $arr_list=$this->compareWheelMeasurementsToSettings($value, $autosettings, $manualsettings);
                if($arr_list["addToExceptionList"]==true){
                    $exceptionList[]=$arr_list;    
                }
            }
            //destroy objects
            unset($manualsettings);
            unset($autosettings);
            return $exceptionList;
        }
        else return NULL;
    }
}

