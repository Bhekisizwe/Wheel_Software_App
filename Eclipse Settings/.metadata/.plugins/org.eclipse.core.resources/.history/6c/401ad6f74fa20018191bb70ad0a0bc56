<?php
declare(strict_types=1);
namespace UserClasses\BusinessLayer;

use UserClasses\ {
    BusinessObjects\ActivityLogBO,
    DataLayer\ActivityLogDL,
    BusinessObjects\UserAccountBO
};

/**
 *
 * @author Bheki Mthethwa
 *        
 */
class ActivityLog
{
    private $sender;
    private $err;
    private $dirname;
    private $activityLogDL;

    /**
     */
    public function __construct()
    {
        $this->sender=new Email();
        $this->err=new ErrorLog();
        $this->activityLogDL=new ActivityLogDL();
        $this->dirname=__DIR__."\\..\\..\\..\\..\\ActivityLog";
    }

    /**
     */
    function __destruct()
    {
        $this->sender=null;
        $this->err=null;
        $this->activityLogDL=null;
    }
    
    public function searchForActivityReports(ActivityLogBO $data):array {
        if(isset($data)){
            try {
                $arr=$data->getArray();
                $arr_2D=$this->activityLogDL->searchData($arr);
            } catch (\Exception $e) {
                $class_name="ActivityLog";
                $method_name="searchForActivityReports";
                $this->err->logErrors($e,null,$class_name, $method_name);
            } 
            return $arr_2D;
        }
        else return NULL;
    }
    
    public function listAllActivityNames():array {        
    try {            
            $arr_2D=$this->activityLogDL->retrieveAllActivityTasks();
        } catch (\Exception $e) {
            $class_name="ActivityLog";
            $method_name="listAllActivityNames";
            $this->err->logErrors($e,null,$class_name, $method_name);
        }
        return $arr_2D;            
    }
    
    public function addActivityData(ActivityLogBO $data):bool {
        if(isset($data)){
            try {
                $arr=$data->getArray();
                $status_message=$this->activityLogDL->create($arr);
                if(!$status_message) throw new \Exception("Failed to add an Activity event to the database");
            } catch (\Exception $e) {
                $status_message=false;
                $class_name="ActivityLog";
                $method_name="addActivityData";
                $this->err->logErrors($e,null,$class_name, $method_name);
            }
            return $status_message;
        }
        else return false;
    }
    
    private function deleteFile(string $filename):bool {
        ($filename!="")?$status=unlink($this->dirname."\\".$filename):$status=false;
        return $status;
    }
    
    private function checkFileExists(string $filename):bool {
        ($filename!="")?$status=file_exists($this->dirname."\\".$filename):$status=false;
        return $status;
    }
    
    private function checkDirectoryExists():bool {
        return file_exists($this->dirname);    
    }
    
    private function createDirectory():bool {
        return mkdir($this->dirname);   
    }
    
    public function generatePDFActivityReport(ActivityLogBO $data):bool {
        
    }
    
    private function getEmailRecepient(UserAccountBO $data):string {        
        if(isset($data)){
            $userAccounts=new UserAccounts();
            //extract email address using staffNumber of user.            
            $arr_result=$userAccounts->listUserAccount($data);
            unset($userAccounts);
            return $arr_result["emailAddress"];
        }
        else return "";
    }
    
    private function generateEmailMessage(string $emailAddress):array {
        //generate email array
        $arr_email=array();
        $arr_email["to"]=$emailAddress;
        $arr_email["subject"]="Activity Log Report";       
        $body="Dear Sir/Madam<p>";
        $body.="Please find attached the requested ActivityLog report. <p>";        
        $body.=" By Order (Gqunsu Engineering Pty Ltd)";
        $arr_email["body"]=$body;
        $arr_email["file"]=$this->dirname."\\Planning.pdf";
        unset($data);
        return $arr_email;
    }
}

